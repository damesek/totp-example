(ns totp-demo.core
  (:require [reitit.ring :as ring]
            [ring.adapter.jetty :refer [run-jetty]]
            [ring.middleware.defaults :refer [wrap-defaults site-defaults]]
            [hiccup.core :refer [html]]
            [clojure.edn :as edn]
            [clojure.java.io :as io]
            [clojure.string :as str]
            [one-time.core :as ot]
            [one-time.qrgen :as qrgen])
  (:import [java.util Base64]))

(def data-file "data.edn")

(defn load-users []
  (if (.exists (io/file data-file))
    (let [content (slurp data-file)]
      (if (str/blank? content)
        {}
        (edn/read-string content)))
    {}))

(defn save-users [users-map]
  (spit data-file (pr-str users-map)))

(defn html-response [hiccup-content]
  {:status 200
   :headers {"Content-Type" "text/html; charset=utf-8"}
   :body (html hiccup-content)})

(defn login-page [error-msg]
  (html-response
    [:html
     [:head [:title "Login"]]
     [:body
      [:h1 "Login"]
      (when error-msg
        [:p {:style "color:red;"} error-msg])
      [:form {:method "post" :action "/login"}
       "Username: " [:input {:type "text" :name "username"}] [:br]
       "6-digit code: "   [:input {:type "text" :name "token"}]    [:br]
       [:button {:type "submit"} "Login"]]]]))

(defn registration-page [error-msg]
  (html-response
    [:html
     [:head [:title "Registration"]]
     [:body
      [:h1 "Registration"]
      (when error-msg
        [:p {:style "color:red;"} error-msg])
      [:form {:method "post" :action "/register"}
       "Username: " [:input {:type "text" :name "username"}] [:br]
       [:button {:type "submit"} "Register"]]]]))

(defn protected-page [username]
  (html-response
    [:html
     [:head [:title "Protected Content"]]
     [:body
      [:h1 "Protected Content"]
      [:p "Successfully logged in, " [:b username] "! This is protected content viewable only after a successful login."]
      [:p [:a {:href "/"} "Logout"]]]]))

(def app-routes
  (ring/router
   [["/"
     {:get (fn [_]
             (html-response
              [:html
               [:head [:title "TOTP Demo"]]
               [:body
                [:h1 "TOTP Two-Factor Authentication Demo"]
                [:p [:a {:href "/register"} "Registration"] " or "
                 [:a {:href "/login"} "Login"]]]]))}]
    ["/register"
     {:get  (fn [_]
              (registration-page nil))
      :post (fn [req]
              (let [username (-> req :params :username str/trim)]
                (cond
                  (str/blank? username)
                  (registration-page "Username cannot be empty.")
                  :else
                  (let [users (load-users)
                        existing? (get users username)
                        secret (ot/generate-secret-key)
                        users' (assoc users username {:secret secret})]
                    (save-users users')
                    (let [baos (qrgen/totp-stream {:secret secret
                                                   :label "TOTP-Demo"
                                                   :user username
                                                   :image-type :PNG
                                                   :image-size 200})
                          image-bytes (.toByteArray baos)
                          base64-img (.encodeToString (Base64/getEncoder) image-bytes)]
                      (html-response
                       [:html
                        [:head [:title "QR Code for Registration"]]
                        [:body
                         [:h1 "TOTP Registration"]
                         (if existing?
                           [:p "Warning: User already existed, secret key has been updated."]
                           [:p "New user registered!"])
                         [:p "Scan the following QR code with your authenticator app (e.g. Google Authenticator) to add the \"TOTP-Demo\" account:"]
                         [:img {:src (str "data:image/png;base64," base64-img)}]
                         [:p "After scanning, you can login using the 6-digit code generated by your mobile app."]
                         [:p [:a {:href "/login"} "Proceed to Login"]]]]))))))}]
    ["/login"
     {:get  (fn [_]
              (login-page nil))
      :post (fn [req]
              (let [params    (:params req)
                    username  (-> params :username str/trim)
                    token-str (-> params :token str/trim)
                    users     (load-users)
                    user-data (get users username)
                    secret    (get user-data :secret)
                    token     (try (Long/parseLong token-str)
                                   (catch Exception _ nil))]
                (cond
                  (str/blank? username)
                  (login-page "Please provide a username!")
                  (str/blank? token-str)
                  (login-page "Please enter the 6-digit code!")
                  (nil? secret)
                  (login-page "Unknown username or TOTP key not registered.")
                  (nil? token)
                  (login-page "The code format is invalid!")
                  (ot/is-valid-totp-token? token secret)
                  {:status  302
                   :headers {"Location" "/protected"}
                   :session {:user username}}
                  :else
                  (login-page "Invalid code. Please try again."))))}]
    ["/protected"
     {:get (fn [req]
             (if-let [username (get-in req [:session :user])]
               (protected-page username)
               {:status 302 :headers {"Location" "/login"}}))}]]))

(def app
  (wrap-defaults
    (ring/ring-handler app-routes (ring/create-default-handler))
    (-> site-defaults
        (assoc-in [:security :anti-forgery] false))))

(defn -main []
  (println "Server started on port 3001. Browse to http://localhost:3001/")
  (run-jetty #'app {:port 3001, :join? false})
  (println "Press Ctrl+C to stop."))
